{
  "root": true,
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "airbnb",
    "airbnb/hooks",
    // Disable old rules requiring `React` import in every .jsx file.
    "plugin:react/jsx-runtime",
    // Turn off all rules that are unnecessary or might conflict with Prettier.
    "plugin:prettier/recommended"
  ],
  "plugins": [
    "react",
    "react-hooks",
    "jsx-a11y",
    "@typescript-eslint",
    "import",
    "simple-import-sort"
  ],
  "rules": {
    // Automatically sort imports and exports
    "simple-import-sort/imports": "warn",
    "simple-import-sort/exports": "warn",
    // Sort props categorically, but not alphabetically
    "react/jsx-sort-props": [
      "warn",
      {
        "reservedFirst": true,
        "noSortAlphabetically": true
      }
    ],
    //    "react/prop-types": "off",
    "import/no-extraneous-dependencies": [
      "error",
      {
        // Since these files are only used during dev and build steps,
        // allow them to import from packages in `devDependencies`.
        "devDependencies": ["*.config.*", "*.setup.*"]
      }
    ],
    // Prettier will fix violations itself - ignore them in ESlint.
    "prettier/prettier": "off",
    // We use dangling underscores quite a bit in our mongo variables eg `_id`.
    "no-underscore-dangle": "off",
    // Allow unary `++` operator for loop syntax only.
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }]
  },
  "env": {
    "es6": true,
    // Enable global browser variables like `window`.
    "browser": true,
    // Enable global node variables like `process`.
    "node": true
  },
  // Allow Eslint to understand TypeScript syntax.
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    // Root tsconfig file of the project.
    "project": "./tsconfig.eslint.json",
    // ECMAScript version supported in the project.
    "ecmaVersion": 2021,
    // We use ECMAScript modules for import/export.
    "sourceType": "module",
    "ecmaFeatures": {
      // Enable jsx for React.
      "jsx": true
    }
  },
  "settings": {
    "react": {
      // Auto-detect React version from package.json.
      "version": "detect"
    },
    "import/parsers": {
      // Typescript files need to use their own ESlint parser
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.eslint.json",
        // Always try to resolve types under `<root>@types` directory,
        // even it doesn't contain any source code.
        "alwaysTryTypes": true
      }
    }
  },
  "overrides": [
    {
      // All Typescript files
      "files": ["**/*.ts?(x)"],
      "rules": {
        "no-unused-vars": "off"
      }
    },
    {
      // Typescript React components
      "files": ["**/*.tsx"],
      "rules": {
        "react/prop-types": "off"
      }
    },
    {
      // Jest tests
      "files": ["./src/**/*.spec.ts?(x)"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest/style",
        "plugin:jest-dom/recommended",
        "plugin:testing-library/react"
      ],
      "plugins": ["jest", "jest-dom", "testing-library"],
      "rules": {
        "jest/no-disabled-tests": "warn",
        "jest/no-focused-tests": "error",
        "jest/no-identical-title": "error",
        "jest/prefer-to-have-length": "warn",
        "jest/valid-expect": "error",
        "jest-dom/prefer-checked": "error",
        "jest-dom/prefer-enabled-disabled": "error",
        "jest-dom/prefer-required": "error",
        "jest-dom/prefer-to-have-attribute": "error",
        "testing-library/await-async-query": "error",
        "testing-library/no-await-sync-query": "error",
        "testing-library/no-debugging-utils": "warn",
        "testing-library/no-dom-import": "off"
      },
      "env": {
        "jest/globals": true
      }
    },
    {
      // Cypress tests
      "files": ["./cypress/**/*.cy.ts"],
      "extends": ["plugin:cypress/recommended"],
      "plugins": ["cypress"],
      "rules": {
        "cypress/no-force": "warn",
        "cypress/assertion-before-screenshot": "warn",
        "cypress/require-data-selectors": "warn",
        "cypress/no-pause": "error"
      },
      "env": {
        "cypress/globals": true
      }
    }
  ]
}
